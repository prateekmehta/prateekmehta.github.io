---
layout: post
title:  "Text Filter & Url Buttons : Merged"
date:   2015-08-1 22:40:00
categories: Gsoc'15 updates
tags: featured
image: /assets/article_images/2014-08-29-welcome-to-jekyll/desktop.jpg
---

So After 15 days of bed rest, due to dengue. i am came back to work, and had lots to cover, Starting from getting the the pending Pull Requests on Text Filters and URL Buttons Merged.

Since we have a lots to cover i will start by telling you the progress done so far. by far we have succesfully merged Text Filters and URL Buttons.

A. URL Buttons : 
Since last time, we were stuck with some fundamental confusion about providers, and sources in the library we chose Embed.  We needed to figure out how to handle limiting embedding by provider and/or sources. For example. I should be able to create two different buttons, one to embed Youtube videos, and one to embed Vimeo videos. By default we should have one button that makes it possible to embed all things though. we needed to evaluate if this is possible from the Embed library itself, if we should provide this functionality ourselves, or if we need to switch to a library that can support this.

On observation we concluded that there's isn't any way to limit the providers in a button. What we can do is look upon providerUrl after Embed library has returned its results and then try to limit the providers ourselves (which might be tricky in some cases), but that is what we decide to leave for the furture since we didn't want to get blocked by it. Henceforth we removed providers and sources from the schema for the time being. for more information or if you could provide any help please comment [here](https://www.drupal.org/node/2529318)
        
So the new schema looks like this.


{% highlight php %}

url_embed.url_button.:
  type: config_entity
  label: 'Url button config'
  mapping:
    label:
      type: label
      label: 'Name'
    id: 
      type: string
      label: 'Machine name'
    button_label:
      type: string
      label: 'Button label'
    button_icon_uuid:
      type: string
      label: 'Button image'

{% endhighlight %}

After deciding that we will ignore, the sources and providers and will have just one universal button, we moved on, made the changes as requred in the Button Interface and consequentially the form.  Which was followed by updating and debugging Tests, which included CRUD Test and Admin Test. Crud Test stand for Create, update, Delete Test, where we try to see if a user with right access could create, update and delete a new URL button. and a a user without access should not.

A part from that we also decided to add default URL button which will be installed with the module itself. This is issue number [2547817](https://www.drupal.org/node/2547817) on url embed issue queue.

Oh yes, we have this one issue still open, about the button icon, for the time being we are still using the icon used by entity embed with an 'E' as the image, so if you could suggest some other icon, such as the one with a 'U' or 'Url' on it, please do that [here](https://www.drupal.org/node/2546344i).

B. Text Filters : 

So finally we also got the process_text branch also merged. The thing which was blocking us was that the tests were failing on travis, i essentially do not have much clue how that works, but basically it is a tool which keeps check on github , that whatever branch is pushed passes all the tests. Initially we had some problem with the composer, and then our tests were failing because the sample_url we used in our tests was that of youtube, which didn't allow travis to access it. Hence we thought of creating routes for testing embedding, Rather than rely on external URLs.

So as discussed Embed expects a service api to which it can post a "GET" request and the api should return it a JSON object with right information as mentioned [here](http://oembed.com/).

So i defined a route and wrote a controller for it, which was pretty much straight forward. Have a look :

{% highlight php %}

<?php


namespace Drupal\url_embed\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\JsonResponse;
    

class OembedProvider extends ControllerBase{


 
    public function content($url=False, $Format = 'json'){
        
        //Start by checking format
        if( $format == 'xml'){
            //throw an error as we don't support it
            return 501;//new WP_Error( 'oembed_lack_support', __( 'only JSON supported for oEmbed' ), array( 'status' => 501 ) );
        }
       
        $response =array( "version"=> "1.0",
                                   "type"=> "photo",
                                   "width"=> 240,
                                   "height"=> 160,
                                   "title"=> "title",
                                   "url"=> "js/plugins/embedTest/DP.jpg",
                                   "author_name"=> "authorName",
                                   "author_url"=> "http",
                                   "provider_name"=> "Url_embed_test",
                                   "provider_url"=> "localhost/url_drupal");  

        return new JsonResponse($response);
    }
    
}

{% endhighlight %}

I thought this should work well since after all its nothing more than returning a json object. but as it turned out its far more complicated as it intially looked, i have discussed the complication [here](https://www.drupal.org/node/2534170). and since i had lost a lot of time after my dengue i moved on without it and fortunately changing sample_url from youtube to flickr worked also allowed travis to run the test and the tests passed. 

Breifly speaking, Embed library has concept of providers which are pre-defined in classes. So when you provide it with an URL, it decides which provider to use based on its endpoint. Since our custom url will not be identified by any of the providers as a valid endpoint, it will be passed on to embedly (if a key is provided), so from what i understand its not possible to add oembed providers to Embed library without hacking it (i.e. adding classes to it) as it doesn't accept providers as a parameter. Hence I don't think there is an easy to do this. While coding the oembed provider itself is not hard but registering it turns to be so.

and Hence i moved onto a more pressing issues such as Embed Form and Ckeditor Integration, while i have started working on it, it is still work in progress, i will post about it in the upcomming post very soon.


[drupal issue queue](https://www.drupal.org/project/issues/url_embed "issue-queue").

plus you can now follow the code at my [github](https://github.com/prateekmehta/url_embed) account.

[url-embed-issues]: [url-embed-gh]:


[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
